name: container-image-scan-with-cache

on:
  workflow_call:

    inputs:
      image_name:
        type: string
        required: false
        default: ${{ github.event.repository.name }}
      push:
        description: 'Boolean that controls if the image should be pushed to the registry.'
        required: false
        default: true
        type: boolean
      build-args:
        description: 'List of build-time variables'
        required: false
        type: string
        default: ""
      dockerfile-path:
        description: 'Dockerfile path'
        required: false
        type: string
        default: "Dockerfile"
      context:
        description: 'Dockerfile context'
        required: false
        type: string
        default: "."
      severity:
        description: 'The severity that will be analyzed in scan'
        type: string
        required: false
        default: 'CRITICAL,HIGH'
      exit_code:
        type: string
        required: false
        default: '0'
      loki_url_api:
        type: string
        required: false
        default: 'http://loki.shared.stone.credit/loki/api/v1/push'

jobs:
  container-image-scan:
    name: Build & Scan local container image 
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set outputs to container tag
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Setup Docker Context for buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Setup Docker buildx with local registry
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          endpoint: builders
      
      - name: Build and push with local registry
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.context }}
          push: ${{ inputs.push }}
          pull: true
          file: ${{ inputs.dockerfile-path }}
          builder: ${{ steps.buildx.outputs.name }}
          tags: localhost:5000/name/${{ github.event.repository.name }}:${{ steps.vars.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ inputs.build-args }}
          labels: |
            stone.banking.vcs-ref=${{ steps.vars.outputs.sha_short }}
      - name: Setup trivy bin 
        shell: bash
        run: |  
          wget https://github.com/aquasecurity/trivy/releases/download/v0.31.3/trivy_0.31.3_Linux-64bit.tar.gz
          tar -xvf trivy_0.31.3_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/trivy
      - name: Generate results to Pull Request comments
        env:
          SEVERITY: ${{ inputs.severity }}
          EXIT_CODE: ${{inputs.exit_code}}
          IMAGE_NAME: ${{ inputs.image_name }}
        id: trivy-scan
        run: |
          set -o pipefail
          TEMP_FILE=$(mktemp)
          trivy image --no-progress --severity $SEVERITY --exit-code  $EXIT_CODE --ignore-unfixed localhost:5000/name/$IMAGE_NAME:${{ steps.vars.outputs.sha_short }} | tee $TEMP_FILE
          echo "Counting $TEMP_FILE bytes"
          BYTE_COUNT=$(wc -c < $TEMP_FILE)
          FINDINGS=$(cat $TEMP_FILE | sed -n 's/.*\(Total: 0\).*/\1/p')
          echo $FINDINGS
          SUCCESS="Total: 0"
          echo "Bytes: $BYTE_COUNT"
          echo "------------------------------------------------------------------------"
          echo "Byte limit for Github Pull Request comment: 50000"
          if (( $BYTE_COUNT < 50000 )); then
            if [[ "$FINDINGS" == "$SUCCESS" ]]; then
               RESULT="*NO VULNERABILITY FOUND"
               echo "success_report=$(echo $RESULT | base64 | tr -d '\n')" >> $GITHUB_OUTPUT
               exit 0
            else
              echo "logs=$(cat $TEMP_FILE | base64 | tr -d '\n')" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "Skipping Pull Request Trivy Scan comment"
          RESULT="*Trivy Container Image scan is over character threshold, please check https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "logs=$(echo $RESULT | base64 | tr -d '\n')" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Update Pull Request with Vulnerability report
        if: steps.trivy-scan.outputs.logs != '' 
        uses: actions/github-script@v6
        env:
          TRIVY_RESULT_BASE64: ${{ steps.trivy-scan.outputs.logs }}
        with:
          result-encoding: string
          script: |
            const prCommentTrivy = async ({github, context}) => {
              const base64String = process.env.TRIVY_RESULT_BASE64 || "Cg=="
              const buff = Buffer.from(base64String, 'base64')
              const trivyResultFormatted = buff.toString('utf-8')
              
              const prOutput = `
            <summary><strong>:poop: :radioactive: :rotating_light: STOP!! You container image has Vulnerabilities :poop: :radioactive: :rotating_light: </strong></summary>

            \`\`\`bash\n
            #Container Image Security Scan Report:\n\n
            ${trivyResultFormatted}
            \`\`\`

            `;

              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: prOutput
              }); 
            }
            await prCommentTrivy({github, context, core})
        continue-on-error: true

      - name: Update Pull Request with Success Report
        if: steps.trivy-scan.outputs.success_report != '' 
        uses: actions/github-script@v6
        env:
          TRIVY_RESULT_BASE64: ${{ steps.trivy-scan.outputs.success_report }}
        with:
          result-encoding: string
          script: |
            const prCommentTrivy = async ({github, context}) => {
              const base64String = process.env.TRIVY_RESULT_BASE64 || "Cg=="
              const buff = Buffer.from(base64String, 'base64')
              const trivyResultFormatted = buff.toString('utf-8')
              
              const prOutput = `
            <summary><strong>:1st_place_medal: This container image is safe!!! :beginner: </strong></summary>

            \`\`\`bash\n
            #Container Image Security Scan Report:\n\n
            ${trivyResultFormatted}
            \`\`\`

            `;

              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: prOutput
              }); 
            }
            await prCommentTrivy({github, context, core})
        continue-on-error: true