name: 'OPA Analysis'

on:
  workflow_call:

    inputs:
      working_directory:
        description: "The working directory of execution."
        type: string
        required: true

      terraform_version:
        description: "The terraform version."
        type: string
        required: false
        default: "1.2.9"

      terragrunt_version:
        description: "The terragrunt version."
        type: string
        required: false
        default: "0.39.2"

      opa_version:
        description: "The OPA version."
        type: string
        required: false
        default: "0.49.0"

      opa_policy:
        description: "The opa policy to run analysis."
        type: string
        required: false
        default: "tags.rego"

jobs:
  opa-analysis:
    name: 'Terragrunt'
    runs-on: ubuntu-22.04

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: LAB SSH key
      shell: bash
      run: |
        mkdir -p "$HOME/.ssh"
        SSH_PATH="$HOME/.ssh"
      
        touch "$SSH_PATH/known_hosts"
        echo "${{secrets.LAB_SSH_KEY}}" > "$SSH_PATH/id_rsa"
      
        chmod 700 "$SSH_PATH"
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        chmod 600 "$SSH_PATH/known_hosts"
        chmod 600 "$SSH_PATH/id_rsa"
      
        eval $(ssh-agent)
        ssh-add "$SSH_PATH/id_rsa"

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1.0.4
      with:
        version: 2     
        verbose: false

    - name: Configure AWS Credentials
      shell: bash
      run: |
        mkdir -p $HOME/.aws && cat <<EOF >$HOME/.aws/credentials
        [labs]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        EOF

    - name: Configure AWS Credentials
      shell: bash
      run: |
        cat <<EOF >$HOME/.aws/config
        [labs]
        region = us-east-1
        output = json
        EOF

    # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: true
    
    - name: Setup Terraform version
      run: terraform --version

    - name: Setup Terraform wrapper path
      run: which terraform

    - name: Setup Terragrunt
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ inputs.terragrunt_version }}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    - name: Download OPA
      id: get-opa
      uses: open-policy-agent/setup-opa@v2
      with:
        version: edge

    - name: Terraform Init
      id: init
      run: |
        terragrunt init --upgrade
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    - name: Terragrunt Plan
      id: plan
      run: |
        terragrunt run-all plan -out=tfplan.binary --terragrunt-non-interactive
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    - name: Terragrunt Plan Out
      id: plan-out
      run: |
        terragrunt show -no-color -json tfplan.binary > tfplan.json
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    - name: OPA Analysis
      env:
        WORKING_DIR: ${{ inputs.working_directory }}
        OPA_POLICY_PATH: ${{ inputs.opa_policy }}
      id: opa-scan
      run: |
        set -o pipefail
        TEMP_FILE=$(mktemp)
        opa eval --format json --data .opa-policies/$OPA_POLICY_PATH -i $WORKING_DIR/tfplan.json --package terraform data.terraform.deny | jq '.result[].expressions[].value[]' | tee $TEMP_FILE
        echo "Counting $TEMP_FILE bytes"
        BYTE_COUNT=$(wc -c < $TEMP_FILE)
        echo "Bytes: $BYTE_COUNT"
        echo "------------------------------------------------------------------------"
        echo "Byte limit for Github Pull Request comment: 50000"
        if (( $BYTE_COUNT < 50000 )); then
          echo "logs=$(cat $TEMP_FILE | base64 | tr -d '\n')" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "Skipping Pull Request OPA Scan comment"
        RESULT="*OPA external deps scan is over character threshold, please check https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "logs=$(echo $RESULT | base64 | tr -d '\n')" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Update Pull Request with Non Compliant OPA report
      id: comment-pr
      if: steps.opa-scan.outputs.logs != ''
      uses: actions/github-script@v6
      env:
        OPA_RESULT_BASE64: ${{ steps.opa-scan.outputs.logs }}
      with:
        result-encoding: string
        script: |
          const prCommentOPA= async ({github, context}) => {
            const base64String = process.env.OPA_RESULT_BASE64 || "Cg=="
            const buff = Buffer.from(base64String, 'base64')
            const OPAResultFormatted = buff.toString('utf-8')
            
            const prOutput = `
          <summary><strong>:x: :radioactive: :x: STOP!! You have resource(s) not compliant with mandatory tags policy, please fix them before merge. :x: :radioactive: :x: </strong></summary>

          \`\`\`bash\n
          #Mandatory Tags Report:\n
          ${OPAResultFormatted}
          \`\`\`

          `;

            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: prOutput
            }); 
          }
          await prCommentOPA({github, context, core})
      continue-on-error: true




