name: 'Terragrunt CI'

on:
  workflow_call:

    inputs:
      working_directory:
        description: "The working directory of execution."
        type: string
        required: true

      terraform_version:
        description: "The terraform version."
        type: string
        required: false
        default: "1.2.9"

      terragrunt_version:
        description: "The terragrunt version."
        type: string
        required: false
        default: "0.39.2"

      opa_version:
        description: "The OPA version."
        type: string
        required: false
        default: "0.49.0"

      opa_policy:
        description: "The opa policy to run analysis."
        type: string
        required: false
        default: "tags.rego"

jobs:
  Terragrunt:
    name: 'Terragrunt'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: LAB SSH key
      shell: bash
      run: |
        mkdir -p "$HOME/.ssh"
        SSH_PATH="$HOME/.ssh"
      
        touch "$SSH_PATH/known_hosts"
        echo "${{secrets.LAB_SSH_KEY}}" > "$SSH_PATH/id_rsa"
      
        chmod 700 "$SSH_PATH"
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        chmod 600 "$SSH_PATH/known_hosts"
        chmod 600 "$SSH_PATH/id_rsa"
      
        eval $(ssh-agent)
        ssh-add "$SSH_PATH/id_rsa"

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1.0.4
      with:
        version: 2     
        verbose: false

    - name: Configure AWS Credentials
      shell: bash
      run: |
        mkdir -p $HOME/.aws && cat <<EOF >$HOME/.aws/credentials
        [labs]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        EOF

    - name: Configure AWS Credentials
      shell: bash
      run: |
        cat <<EOF >$HOME/.aws/config
        [labs]
        region = us-east-1
        output = json
        EOF

    # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: true
    - name: Setup Terraform version
      run: terraform --version
    - name: Setup Terraform wrapper path
      run: which terraform

    - name: Setup Terragrunt
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ inputs.terragrunt_version }}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    - name: Setup OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v${{ inputs.opa_version }}/opa_linux_amd64_static
        sudo chmod 755 opa && sudo mv opa /usr/local/bin/opa
        opa version

    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terragrunt Init
      run: |
        terragrunt init --terragrunt-non-interactive
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    # Generates an execution plan for Terragrunt
    - name: Terragrunt Plan
      run: |
        terragrunt run-all plan -out=tfplan.binary --terragrunt-non-interactive
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    # Generates an execution plan for Terragrunt
    - name: Terragrunt Plan Out
      run: |
        terragrunt show -no-color -json tfplan.binary > tfplan.json
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    - name: Test policies
      run: opa test .opa-policies/

    # Generates an execution plan for Terragrunt
    - name: OPA Analisys
      run: |
        opa eval --format json --data .opa-policies/${{ inputs.opa_policy }} -i ${{ inputs.working_directory }}/tfplan.json --package terraform data.terraform.deny
      continue-on-error: true


    # Generates an execution plan for Terragrunt
    - name: OPA Analisys
      run: |
        opa eval --bundle .opa-policies/ --format values --input ${{ inputs.working_directory }}/tfplan.json --fail-defined 'data.terraform.deny[message]'
      continue-on-error: true