name: tf-security-scan

on:
  workflow_call:

    inputs:
      exit-code:
        type: string
        required: false
        default: '0'
      severity:
        type: string
        required: false
        default: 'CRITICAL,HIGH,MEDIUM'

jobs:
  modules-matrix:
    name: set-matrix
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "json"

      - id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const path = require('path');
            const modified_files = ${{ steps.files.outputs.added_modified }}
            const modules = Array.from(new Set(modified_files.filter((f) => path.extname(f) == '.tf').map((f) => path.dirname(f)))) || []
            console.log(`modified modules ${modules}`)
            const json = JSON.stringify({"module": modules})
            console.log(`::set-output name=matrix::${json}`)

  security-scan:
    name: security-scan
    runs-on: ubuntu-latest
    needs: modules-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.modules-matrix.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup trivy bin 
        shell: bash
        run: |  
          wget https://github.com/aquasecurity/trivy/releases/download/v0.31.3/trivy_0.31.3_Linux-64bit.tar.gz
          tar -xvf trivy_0.31.3_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/trivy
      
      - name: Generate results to Pull Request comments
        id: trivy-scan
        run: |
          set -o pipefail
          TEMP_FILE=$(mktemp)
          trivy config  --format table --exit-code  ${{ inputs.exit-code }} --severity  ${{ inputs.severity }} . | tee $TEMP_FILE
          echo "::set-output name=logs::$(cat $TEMP_FILE | base64 | tr -d '\n')"
        continue-on-error: true

      - name: Update Pull Request with Results
        if: steps.trivy-scan.outputs.logs != ''
        uses: actions/github-script@v6
        env:
          TRIVY_RESULT_BASE64: ${{ steps.trivy-scan.outputs.logs }}
        with:
          result-encoding: string
          script: |
            const prCommentTrivy = async ({github, context}) => {
              const base64String = process.env.TRIVY_RESULT_BASE64 || "Cg=="
              const buff = Buffer.from(base64String, 'base64')
              const trivyResultFormatted = buff.toString('utf-8')
              
              const prOutput = `
            <details><summary><strong>Trivy Infra files scan results ${{ matrix.module }} </strong></summary>

            \`\`\`bash\n
            ${trivyResultFormatted}
            \`\`\`

            </details>`;

              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: prOutput
              }); 
            }
            await prCommentTrivy({github, context, core})
        continue-on-error: true