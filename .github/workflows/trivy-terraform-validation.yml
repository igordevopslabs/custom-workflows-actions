name: tf-security-scan

on:
  workflow_call:

    inputs:
      exit-code:
        type: string
        required: false
        default: '0'
      severity:
        type: string
        required: false
        default: 'CRITICAL,HIGH,MEDIUM'

jobs:
  modules-matrix:
    name: set-matrix
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "json"

      - id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const path = require('path');
            const modified_files = ${{ steps.files.outputs.added_modified }}
            const modules = Array.from(new Set(modified_files.filter((f) => path.extname(f) == '.tf').map((f) => path.dirname(f)))) || []
            console.log(`modified modules ${modules}`)
            const json = JSON.stringify({"module": modules})
            console.log(`::set-output name=matrix::${json}`)

  security-scan:
    name: security-scan
    runs-on: ubuntu-latest
    needs: modules-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.modules-matrix.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run trivy scan for Terraform files
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: ${{ matrix.module }}
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          exit-code: '${{ inputs.exit-code }}'
          ignore-unfixed: true
          severity: '${{ inputs.severity }}'

      - name: Generate trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: ${{ matrix.module }}
          scan-type: 'config'
          hide-progress: false
          format: 'json'
          output: '${{ github.event.repository.name }}-results.json'
          exit-code: '${{ inputs.exit-code }}'
          ignore-unfixed: true
          severity: '${{ inputs.severity }}'

      - name: Generate github actions summary
        run: |
          ls -lha ../
          FILE=$(cat ${{ github.event.repository.name }}-results.json | jq '. | index(".Results") ')
          if [[ "$FILE" != "null" ]]; then
            RESULT=$(cat ${{ github.event.repository.name }}-results.json | jq  '.Results[].MisconfSummary.Failures')
            if [[ ! "$RESULT" -eq 0 ]]; then
              echo "#### Ops, parece que temos alguns  pontos a serem corrigidos  :rotating_light:" >> $GITHUB_STEP_SUMMARY
              ERRORS=$(cat ${{ github.event.repository.name }}-results.json | jq  '.Results[].Misconfigurations[].Title')
              echo $ERRORS >> $GITHUB_STEP_SUMMARY
            else
              echo "#### Show! nenhum problema encontrado nos arquivos de declaração da infraestrutura :green_heart:" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "#### Não foram encontrados arquivos de declaração de infraestrutura. :pencil:" >> $GITHUB_STEP_SUMMARY
          fi