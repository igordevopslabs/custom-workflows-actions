name: Build and Push

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application/Project name'
        required: true
        type: string
      app_path:
        description: 'Application/Project path go files'
        required: true
        type: string
      exit_code:
        description: 'Acceptable values are 0 or 1. If set to 0, the pipeline will not break'
        required: false
        type: string
        default: '0'
      severity:
        description: 'The severity used to scan. The values can be: LOW, MEDIUM, HIGH or CRITICAL. You can use comma to pass more than one value'
        required: false
        type: string
        default: 'MEDIUM,HIGH,CRITICAL'

jobs:
  image-scan:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Extract go version from go.mod
        id: extract
        run: sed -En 's/^go[[:space:]]+([[:digit:].]+)$/GO_VERSION=\1/p' go.mod >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: CGO_ENABLED=1 GO111MODULES=on go build -ldflags="-s -w" -o ${{ inputs.app_name }}-bin ${{ inputs.app_path }}

      - name: Move go binary
        run: mkdir binaries && mv ${{ inputs.app_name }}-bin binaries && ls -lha binaries

      - name: Create Temp Dockerfile
        run: |
          cat >Dockerfile <<EOL
          FROM ubuntu:18.04
          
          RUN apt-get update -y \
          && DEBIAN_FRONTEND=noninteractive apt-get install locales tzdata openssl ca-certificates -y \
          && /usr/sbin/update-ca-certificates \
          && locale-gen en_US.UTF-8 pt_BR.UTF-8
          
          ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8 DEBIAN_FRONTEND=noninteractive
          
          # rootless
          RUN useradd --create-home --uid 1000 gopher
          WORKDIR /home/gopher
          USER 1000
          
          COPY ./binaries ./

          CMD ["./${{ inputs.app_name }}-bin"]
          
          EOL

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }}

      - name: Container Vuln Scan
        uses: aquasecurity/trivy-action@0.7.1
        with:
          image-ref: '${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }}'
          format: 'table'
          exit-code: '${{ inputs.exit_code }}'
          ignore-unfixed: true
          vuln-type: 'os,library'
          security-checks: 'vuln'
          severity: '${{ inputs.severity }}'

      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@0.7.1
        with:
          image-ref: '${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }}'
          format: 'json'
          output: '${{ inputs.app_name }}-results.json'
          exit-code: '${{ inputs.exit_code }}'
          ignore-unfixed: true
          vuln-type: 'os,library'
          security-checks: 'vuln'
          severity: '${{ inputs.severity }}'

      #- name: Generate github actions summary
        #run: |
          #VULN=$(cat ${{ inputs.app_name }}-results.json | jq '.Results[].Vulnerabilities')
          #if [[ "$VULN" != "null" ]]; then
            #echo "#### Ops! Looks like we have some points to be fixed in ${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }} image :rotating_light:" >> $GITHUB_STEP_SUMMARY
            #ERRORS=$(cat ${{ inputs.app_name }}-results.json | jq  '.Results[].Vulnerabilities[].VulnerabilityID')
            #printf "$ERRORS\n" >> $GITHUB_STEP_SUMMARY
          #else
            #echo "#### Excellent! we have no vulnerability for ${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }} image :green_heart:" >> $GITHUB_STEP_SUMMARY
          #fi

  comment:
    #if: contains(github.event.comment.body, 'special string')

    runs-on: ubuntu-latest

    steps:
      - name: Add comment to PR
        env:
          URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": "blah blah" }'