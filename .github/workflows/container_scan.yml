name: Build and Push

on:
  workflow_call:
    inputs:
      tag:
        description: 'Build tag.'
        required: true
        type: string
      app_name:
        description: 'Application/Project name'
        required: true
        type: string
      app_path:
        description: 'Application/Project path go files'
        required: true
        type: string

jobs:
  image-scan:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Extract go version from go.mod
        id: extract
        run: sed -En 's/^go[[:space:]]+([[:digit:].]+)$/GO_VERSION=\1/p' go.mod >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
				env:
					CGO_ENABLED: 1
          GO111MODULES: 'on'
        run: -ldflags="-s -w" -o ${{ inputs.app_name }}-bin ${{ inputs.app_path }}

      - name: Move go binary
        run: mkdir binaries && mv ${{ inputs.app_name }}-bin binaries && ls -lha binaries

      - name: Create Temp Dockerfile
        run: |
          cat >Dockerfile <<EOL
          FROM ubuntu:20.04
          
          RUN apt-get update -y \
          && DEBIAN_FRONTEND=noninteractive apt-get install locales tzdata openssl ca-certificates -y \
          && /usr/sbin/update-ca-certificates \
          && locale-gen en_US.UTF-8 pt_BR.UTF-8
          
          ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8 DEBIAN_FRONTEND=noninteractive
          
          # rootless
          RUN useradd --create-home --uid 1000 gopher
          WORKDIR /home/gopher
          USER 1000
          
          COPY ./binaries ./

          ENTRYPOINT ["/binaries/${{ inputs.app_name }}-bin"]
          
          EOL

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ inputs.tag }}

      - name: Run Trivy container vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '$DOCKER_USER/$REPO_NAME:${{ inputs.tag }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          security-checks: 'vuln'
          severity: 'CRITICAL,HIGH'

      - name: Generate Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '$DOCKER_USER/$REPO_NAME:${{ inputs.tag }}'
          format: 'json'
          output: '${{ inputs.image_name }}-results.json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          security-checks: 'vuln'
          severity: 'CRITICAL,HIGH'