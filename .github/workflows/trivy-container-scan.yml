name: container-image-security-scan 

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application/Project name'
        required: false
        default: ${{ github.event.repository.name }}
        type: string
      dockerfile_path:
        description: 'Application/Project path go files'
        default: Dockerfile
        required: false
        type: string
      exit_code:
        type: string
        required: false
        default: '0'
      severity:
        type: string
        required: false
        default: 'CRITICAL,HIGH'

jobs:
  image-scan:
    name: Build temp Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build the Docker image
        run: docker build . --file ${{ inputs.dockerfile_path }} --tag ${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }}
          
      - name: Setup trivy bin 
        shell: bash
        run: |  
          wget https://github.com/aquasecurity/trivy/releases/download/v0.31.3/trivy_0.31.3_Linux-64bit.tar.gz
          tar -xvf trivy_0.31.3_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/trivy

      - name: Generate results to Pull Request comments
        id: trivy-scan
        run: |
          set -o pipefail
          TEMP_FILE=$(mktemp)
          trivy image --no-progress --severity ${{ inputs.severity }} --exit-code  ${{inputs.exit_code}} --ignore-unfixed ${{ inputs.app_name }}:${{ steps.vars.outputs.sha_short }} | tee $TEMP_FILE
          echo "::set-output name=logs::$(cat $TEMP_FILE | base64 | tr -d '\n')"
        continue-on-error: true

      - name: Update Pull Request with Results
        if: steps.trivy-scan.outputs.logs != ''
        uses: actions/github-script@v6
        env:
          TRIVY_RESULT_BASE64: ${{ steps.trivy-scan.outputs.logs }}
        with:
          result-encoding: string
          script: |
            const prCommentTrivy = async ({github, context}) => {
              const base64String = process.env.TRIVY_RESULT_BASE64 || "Cg=="
              const buff = Buffer.from(base64String, 'base64')
              const trivyResultFormatted = buff.toString('utf-8')
              
              const prOutput = `
            <details><summary><strong>Trivy Container Image Scan results</strong></summary>

            \`\`\`bash\n
            ${trivyResultFormatted}
            \`\`\`

            </details>`;

              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: prOutput
              }); 
            }
            await prCommentTrivy({github, context, core})
        continue-on-error: true

      - name: Trivy Slack Notification
        if: steps.trivy-scan.outputs.logs != ''
        uses: igordevopslabs/custom-actions-app/trivy-send-slack-notification@main
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          github_token: ${{ secrets.GH_TOKEN }}
          tag: ${{ inputs.tag }}
          scan_type: 'trivy container image'    