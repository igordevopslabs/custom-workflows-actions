name: trivy-iac-scan

on:
  workflow_call:
    inputs:
      env:
        type: string
        required: false
        default: production
      scan_score:
        type: number
        description: 'A score to set exit-code 1 and break the pipeline execution'
        required: false
        default: 50
      working_directory:
        type: string
        description: 'A default locate where trivy will run'
        required: false
        default: '/github/workspace/'

jobs:
  iac-scanning:
    name: IAC Scanning 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Application Repository
        uses: actions/checkout@v3

      - name: Install Trivy bin
        shell: bash
        run: |  
          wget https://github.com/aquasecurity/trivy/releases/download/v0.31.3/trivy_0.31.3_Linux-64bit.tar.gz
          tar -xvf trivy_0.31.3_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/trivy

      - name: Disable initramfs update
        run: sudo sed -i 's/yes/no/g' /etc/initramfs-tools/update-initramfs.conf

      - name: Disable man-db update
        run: sudo rm -f /var/lib/man-db/auto-update

      - name: Trivy Iac Scanning
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'MEDIUM,CRITICAL,HIGH'

      - name: "Trivy Output"
        id: config_scan
        run: |
          set -o pipefail
          TEMP_FILE=$(mktemp)
          trivy config --severity MEDIUM,CRITICAL,HIGH --scan-ref ${{inputs.working_directory}}| tee $TEMP_FILE
          echo "::set-output name=logs::$(cat $TEMP_FILE | base64 | tr -d '\n')"
        continue-on-error: true

      - name: Add comment to PR
        env:
          URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": ${{ steps.config_scan.outputs.stdout }} }'

      - name: Check helmfile existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "deploy/helmfile.yaml"

      - name: Install Helm
        if: steps.check_files.outputs.files_exists == 'true'
        shell: bash
        run: |  
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      
      - name: Install Helm Plugins
        if: steps.check_files.outputs.files_exists == 'true'
        shell: bash
        run: |
          helm plugin install https://github.com/databus23/helm-diff --version v3.1.1
          helm plugin install https://github.com/aslafy-z/helm-git --version 0.10.0
      
      - name: Install Helmfile
        if: steps.check_files.outputs.files_exists == 'true'
        shell: bash
        run: |  
          wget https://github.com/roboll/helmfile/releases/download/v0.143.5/helmfile_linux_386
          chmod +x helmfile_linux_386
          sudo mv helmfile_linux_386 /usr/local/bin/helmfile

      - name: Install Polaris
        if: steps.check_files.outputs.files_exists == 'true' 
        shell: bash
        run: |  
          wget https://github.com/FairwindsOps/polaris/releases/download/7.0.1/polaris_linux_amd64.tar.gz
          tar -xvf polaris_linux_amd64.tar.gz
          sudo mv polaris /usr/local/bin/polaris

      - name: Generate summary security report for helmchart
        if: steps.check_files.outputs.files_exists == 'true'
        shell: bash
        run: |  
          helmfile -f deploy/helmfile.yaml -e ${{inputs.env}} template >> ${{inputs.env}}-deploy.yaml && polaris audit --audit-path ${{inputs.env}}-deploy.yaml --format=pretty --only-show-failed-tests --set-exit-code-below-score ${{inputs.scan_score}}

